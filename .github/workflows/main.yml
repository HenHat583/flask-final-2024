name: Flask CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: 'eu-north-1'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: versioning
        run: >
          pip install docker;
          python3 ./version-maker.py
        id: version
      - name: Build & Push
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile
          push: true
          tags: henhat583/flask-app:latest
          
  terraform-setup:
    name: Setup the cloud environment
    runs-on: ubuntu-latest
    steps:
      - name: Use repo files
        uses: actions/checkout@v2
      - name: Generate cred.json
        uses: frdrwrt/write-to-file@v1.3
        with:
          filepath: deploy/tf/cred.json
          content: ${{ secrets.GCLOUD_PRIVATE_KEY }}
          mode: 744
      - uses: hashicorp/setup-terraform@v2.0.3
      - run: terraform init
        working-directory: deploy/tf
      - run: terraform apply -auto-approve -var-file="terraform.tfvars"
        working-directory: deploy/tf
        
  flask-testing: # New job: flask-testing
    needs:
      - build-and-push
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Pull Docker image
        run: docker pull henhat583/flask-app:latest
  
      - name: Run Flask container
        run: docker run -d -p 5000:5000 --name test henhat583/flask-app:latest
  
      - name: Wait for Flask to start
        run: sleep 3
  
      - name: Test Flask with cURL
        run: curl -X GET http://localhost:5000

  deploy-to-gke:
    needs:
      - build-and-push
      - flask-testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCLOUD_PRIVATE_KEY }}
          export_environment_variables: true
          
      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Set up GCP credentials
        run: |
          echo ${{ secrets.GCLOUD_PRIVATE_KEY }} > gcp_sa_key.json
          gcloud auth activate-service-account --key-file=gcp_sa_key.json

      - name: Deploy to GKE
        run: |
          kubectl apply -f deploy/kube/flaskapp.yaml
        env:
          GOOGLE_APPLICATION_CREDENTIALS: gcp_sa_key.json

  push-flask-to-prod:
    runs-on: ubuntu-latest
    needs:
    - build-and-push
    - flask-testing
    - deploy-to-gke
    steps:
    - name: Configure AWS Credentials For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v2
      with:
        # AWS Access Key ID. This input is required if running in the GitHub hosted environment. It is optional if running in a self-hosted environment that already has AWS credentials, for example on an EC2 instance.
        aws-access-key-id: ${{  secrets.AWS_ACCESS_KEY_ID  }}
        # AWS Secret Access Key. This input is required if running in the GitHub hosted environment. It is optional if running in a self-hosted environment that already has AWS credentials, for example on an EC2 instance.
        aws-secret-access-key: ${{  secrets.AWS_SECRET_ACCESS_KEY  }}
        # AWS Session Token
        aws-region: eu-north-1
        # Whether to set the AWS account ID for these credentials as a secret value, so that it is masked in logs. Valid values are 'true' and 'false'. Defaults to true

    - name: Write PEM file
      uses: frdrwrt/write-to-file@v1.3
      with:
        filepath: hen.pem
        content: ${{ secrets.AWS_SSH }}
        mode: 744
        
    - name: start Prod Instance and get IP
      id: prod-instance-ip
      run: |
        aws ec2 start-instances --instance-ids ${{ secrets.PROD_INSTANCE_ID }};
        aws ec2 wait instance-running --instance-ids ${{ secrets.PROD_INSTANCE_ID }};
        prodInstanceIP=$(aws ec2 describe-instances --instance-ids ${{ secrets.PROD_INSTANCE_ID }} --query 'Reservations[].Instances[].PublicIpAddress' --output text);
        echo "::set-output name=ip::$prodInstanceIP";

    - name: Pull Docker Image on EC2
      run: |
        echo "Pulling Docker image on EC2 prod server..."
        sudo ssh -i hen.pem -o StrictHostKeyChecking=no ec2-user@${{ steps.prod-instance-ip.outputs.ip }} "docker pull henhat583/flask-app:latest"

    - name: Run Flask App on EC2 prod server
      run: |
        echo "Running Flask app on EC2 prod server..."
        sudo ssh -i hen.pem -o StrictHostKeyChecking=no ec2-user@${{ steps.prod-instance-ip.outputs.ip }} "sudo docker rm -f prod"
        sudo ssh -i hen.pem -o StrictHostKeyChecking=no ec2-user@${{ steps.prod-instance-ip.outputs.ip }} "sudo docker run -d -p 5000:5000 --name prod henhat583/flask-app:latest"

    - name: http://${{ steps.prod-instance-ip.outputs.ip }}:5000
      run: |
        echo "The site is http://${{ steps.prod-instance-ip.outputs.ip }}:5000"
