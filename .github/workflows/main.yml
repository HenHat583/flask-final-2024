name: Flask CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: 'eu-north-1'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: versioning
        run: >
          pip install docker;
          python3 ./version-maker.py
        id: version
      - name: Build & Push
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile
          push: true
          tags: ${{ steps.version.outputs.version }}

      - name: Start Test Instance
        id: test-instance-ip
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.TEST_INSTANCE_ID }}
          testInstanceIP=$(aws ec2 describe-instances --instance-ids ${{ secrets.TEST_INSTANCE_ID }} --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          echo "::set-output name=ip::$testInstanceIP"

      - name: Push to Docker Hub
        run: |
          echo "Pushing to Docker Hub..."
          sudo docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
          sudo docker push henhat583/flask-app:latest

      - name: Pull Docker Image on Test Server
        run: |
          echo "Pulling Docker image on test server..."
          sudo ssh -i /var/lib/jenkins/.ssh/hen.pem -o StrictHostKeyChecking=no ec2-user:${{ steps.test-instance-ip.outputs.ip }} "docker pull henhat583/flask-app:latest"

      - name: Check Flask with cURL on test server
        run: |
          echo "Building and running Flask app on the test server..."
          sudo ssh -i /var/lib/jenkins/.ssh/hen.pem -o StrictHostKeyChecking=no ec2-user:${{ steps.test-instance-ip.outputs.ip }} "sudo docker rm -f test"
          sudo ssh -i /var/lib/jenkins/.ssh/hen.pem -o StrictHostKeyChecking=no ec2-user:${{ steps.test-instance-ip.outputs.ip }} "sudo docker run -d -p 5000:5000 --name test henhat583/flask-app:latest"
          sleep 10 # Give some time for the app to start
          echo "Checking Flask app using cURL..."
          sudo ssh -i /var/lib/jenkins/.ssh/hen.pem -o StrictHostKeyChecking=no ec2-user:${{ steps.test-instance-ip.outputs.ip }} "curl -s http://localhost:5000"

      - name: start Prod Instance and get IP
        id: prod-instance-ip
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.PROD_INSTANCE_ID }}
          prodInstanceIP=$(aws ec2 describe-instances --instance-ids ${{ secrets.PROD_INSTANCE_ID }} --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          echo "::set-output name=ip::$prodInstanceIP"
          
      - name: Pull Docker Image on EC2
        run: |
          echo "Pulling Docker image on EC2 prod server..."
          sudo ssh -i /var/lib/jenkins/.ssh/hen.pem -o StrictHostKeyChecking=no ec2-user:${{ steps.prod-instance-ip.outputs.ip }} "docker pull henhat583/flask-app:latest"

      - name: Run Flask App on EC2 prod server
        run: |
          echo "Running Flask app on EC2 prod server..."
          sudo ssh -i /var/lib/jenkins/.ssh/hen.pem -o StrictHostKeyChecking=no ec2-user:${{ steps.prod-instance-ip.outputs.ip }} "sudo docker rm -f prod"
          sudo ssh -i /var/lib/jenkins/.ssh/hen.pem -o StrictHostKeyChecking=no ec2-user:${{ steps.prod-instance-ip.outputs.ip }} "sudo docker run -d -p 5000:5000 --name prod henhat583/flask-app:latest"

      - name: Stop Test Instance
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.TEST_INSTANCE_ID }}

      - name: Show Site URL
        run: |
          echo "The site is http://${{ steps.prod-instance-ip.outputs.ip }}:5000"
